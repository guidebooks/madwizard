[
  {
    "graph": {
      "group": "Local Install####Kubernetes Install",
      "groupContext": "test/inputs/23/install",
      "title": "Install Ray",
      "source": "placeholder",
      "provenance": ["test/inputs/23/install"],
      "choices": [
        {
          "member": 0,
          "graph": {
            "key": "somekey",
            "sequence": [
              {
                "group": "Intel####Apple Silicon",
                "groupContext": "test/inputs/23/install_1",
                "source": "placeholder",
                "provenance": ["test/inputs/23/install"],
                "choices": [
                  {
                    "member": 0,
                    "graph": {
                      "key": "somekey",
                      "sequence": [
                        {
                          "body": "pip install -U ray",
                          "language": "shell",
                          "id": "somekey"
                        }
                      ]
                    },
                    "title": "Intel",
                    "description": "\nIf you are running on x86/Intel hardware."
                  },
                  {
                    "member": 1,
                    "graph": {
                      "key": "somekey",
                      "sequence": [
                        {
                          "key": "somekey",
                          "title": "Conda: Installation",
                          "description": "Conda is an open-source package management system and environment management system that runs on Windows, macOS, and Linux. Conda quickly installs, runs, and updates packages and their dependencies. Conda easily creates, saves, loads, and switches between environments on your local computer. It was created for Python programs but it can package and distribute software for any language.\n",
                          "filepath": "test/inputs/23/python/conda/install",
                          "graph": {
                            "key": "somekey",
                            "sequence": [
                              {
                                "group": "Install Miniconda####Install Anaconda",
                                "groupContext": "test/inputs/23/python/conda/install",
                                "title": "Choose a Conda Installation Method",
                                "description": "Conda is an open-source package management system and environment management system that runs on Windows, macOS, and Linux. Conda quickly installs, runs, and updates packages and their dependencies. Conda easily creates, saves, loads, and switches between environments on your local computer. It was created for Python programs but it can package and distribute software for any language.\n",
                                "source": "placeholder",
                                "provenance": ["test/inputs/23/python/conda/install"],
                                "choices": [
                                  {
                                    "member": 0,
                                    "graph": {
                                      "key": "somekey",
                                      "sequence": [
                                        {
                                          "group": "Windows####Linux####MacOS",
                                          "groupContext": "test/inputs/23/python/conda/install_1",
                                          "source": "placeholder",
                                          "provenance": ["test/inputs/23/python/conda/install"],
                                          "choices": [
                                            {
                                              "member": 1,
                                              "graph": {
                                                "key": "somekey",
                                                "sequence": [
                                                  {
                                                    "group": "Intel####ARM64",
                                                    "groupContext": "test/inputs/23/python/conda/install_2",
                                                    "source": "placeholder",
                                                    "provenance": ["test/inputs/23/python/conda/install"],
                                                    "choices": [
                                                      {
                                                        "member": 0,
                                                        "graph": {
                                                          "key": "somekey",
                                                          "sequence": [
                                                            {
                                                              "body": "curl -LO https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\nbash Miniconda3-latest-Linux-x86_64.sh -b -p ~/miniconda",
                                                              "language": "shell",
                                                              "id": "somekey"
                                                            }
                                                          ]
                                                        },
                                                        "title": "Intel"
                                                      },
                                                      {
                                                        "member": 1,
                                                        "graph": {
                                                          "key": "somekey",
                                                          "sequence": [
                                                            {
                                                              "body": "curl -LO https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-aarch64.sh\nbash Miniconda3-latest-Linux-aarch64.sh -b -p $HOME/miniconda",
                                                              "language": "shell",
                                                              "id": "somekey"
                                                            }
                                                          ]
                                                        },
                                                        "title": "ARM64"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              "title": "Linux",
                                              "description": "\nIf you are running a Linux OS."
                                            },
                                            {
                                              "member": 2,
                                              "graph": {
                                                "key": "somekey",
                                                "sequence": [
                                                  {
                                                    "group": "Intel####Apple Silicon",
                                                    "groupContext": "test/inputs/23/python/conda/install_3",
                                                    "source": "placeholder",
                                                    "provenance": ["test/inputs/23/python/conda/install"],
                                                    "choices": [
                                                      {
                                                        "member": 0,
                                                        "graph": {
                                                          "key": "somekey",
                                                          "sequence": [
                                                            {
                                                              "body": "curl -LO https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh\nbash Miniconda3-latest-MacOSX-x86_64.sh -b -p $HOME/miniconda",
                                                              "language": "shell",
                                                              "id": "somekey"
                                                            }
                                                          ]
                                                        },
                                                        "title": "Intel",
                                                        "description": "\nIf you are running on x86/Intel hardware."
                                                      },
                                                      {
                                                        "member": 1,
                                                        "graph": {
                                                          "key": "somekey",
                                                          "sequence": [
                                                            {
                                                              "body": "curl -LO https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh\nbash Miniconda3-latest-MacOSX-arm64.sh -b -p $HOME/miniconda",
                                                              "language": "shell",
                                                              "id": "somekey"
                                                            }
                                                          ]
                                                        },
                                                        "title": "Apple Silicon",
                                                        "description": "\nIf you are running on Apple Silicon/ARM hardware."
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              "title": "MacOS",
                                              "description": "\nIf you are running MacOS."
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "title": "Install Miniconda",
                                    "description": "\nMiniconda is a free minimal installer for conda. It is a small, bootstrap version of Anaconda that includes only conda, Python, the packages they depend on, and a small number of other useful packages, including pip, zlib and a few others. [See if Miniconda is right for you.](https://docs.conda.io/projects/conda/en/latest/user-guide/install/download.html#anaconda-or-miniconda)"
                                  },
                                  {
                                    "member": 1,
                                    "graph": {
                                      "key": "somekey",
                                      "sequence": [
                                        {
                                          "group": "MacOS####Linux",
                                          "groupContext": "test/inputs/23/python/conda/install_4",
                                          "source": "placeholder",
                                          "provenance": ["test/inputs/23/python/conda/install"],
                                          "choices": [
                                            {
                                              "member": 0,
                                              "graph": {
                                                "key": "somekey",
                                                "sequence": [
                                                  {
                                                    "body": "curl -LO https://repo.anaconda.com/archive/Anaconda3-2021.11-MacOSX-x86_64.sh\nbash Anaconda3-2021.11-MacOSX-x86_64.sh -b -p $HOME/miniconda",
                                                    "language": "shell",
                                                    "id": "somekey"
                                                  }
                                                ]
                                              },
                                              "title": "MacOS"
                                            },
                                            {
                                              "member": 1,
                                              "graph": {
                                                "key": "somekey",
                                                "sequence": [
                                                  {
                                                    "group": "x86####POWER8 and POWER9####AWS Graviton2/ARM64####IBM z/Linux and LinuxONE",
                                                    "groupContext": "test/inputs/23/python/conda/install_5",
                                                    "source": "placeholder",
                                                    "provenance": ["test/inputs/23/python/conda/install"],
                                                    "choices": [
                                                      {
                                                        "member": 0,
                                                        "graph": {
                                                          "key": "somekey",
                                                          "sequence": [
                                                            {
                                                              "body": "curl -LO https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-x86_64.sh\nbash Anaconda3-2021.11-Linux-x86_64.sh -b -p $HOME/miniconda",
                                                              "language": "shell",
                                                              "id": "somekey"
                                                            }
                                                          ]
                                                        },
                                                        "title": "x86"
                                                      },
                                                      {
                                                        "member": 1,
                                                        "graph": {
                                                          "key": "somekey",
                                                          "sequence": [
                                                            {
                                                              "body": "curl -LO https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-ppc64le.sh\nbash Anaconda3-2021.11-Linux-ppc64le.sh -b -p $HOME/miniconda",
                                                              "language": "shell",
                                                              "id": "somekey"
                                                            }
                                                          ]
                                                        },
                                                        "title": "POWER8 and POWER9"
                                                      },
                                                      {
                                                        "member": 2,
                                                        "graph": {
                                                          "key": "somekey",
                                                          "sequence": [
                                                            {
                                                              "body": "curl -LO https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-aarch64.sh\nbash Anaconda3-2021.11-Linux-aarch64.sh -b -p $HOME/miniconda",
                                                              "language": "shell",
                                                              "id": "somekey"
                                                            }
                                                          ]
                                                        },
                                                        "title": "AWS Graviton2/ARM64"
                                                      },
                                                      {
                                                        "member": 3,
                                                        "graph": {
                                                          "key": "somekey",
                                                          "sequence": [
                                                            {
                                                              "body": "curl -LO https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-s390x.sh\nbash Anaconda3-2021.11-Linux-s390x.sh -b -p $HOME/miniconda",
                                                              "language": "shell",
                                                              "id": "somekey"
                                                            }
                                                          ]
                                                        },
                                                        "title": "IBM z/Linux and LinuxONE"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              "title": "Linux"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "title": "Install Anaconda",
                                    "description": "\nThis will install Miniconda plus hundreds of packages."
                                  }
                                ]
                              },
                              {
                                "key": "somekey",
                                "title": "Update your PATH to include conda",
                                "filepath": "",
                                "graph": {
                                  "key": "somekey",
                                  "sequence": [
                                    {
                                      "body": "export PATH=~/miniconda/bin:$PATH",
                                      "language": "shell",
                                      "id": "somekey"
                                    }
                                  ]
                                },
                                "source": "placeholder"
                              }
                            ]
                          },
                          "source": "placeholder"
                        },
                        {
                          "body": "conda activate\npip uninstall grpcio\nconda install grpcio\npip install ray",
                          "language": "shell",
                          "id": "somekey"
                        }
                      ]
                    },
                    "title": "Apple Silicon",
                    "description": "\nIf you are running on Apple Silicon/ARM hardware."
                  }
                ]
              }
            ]
          },
          "title": "Local Install",
          "description": "\nThis will install Ray on your laptop."
        },
        {
          "member": 1,
          "graph": {
            "key": "somekey",
            "sequence": [
              {
                "key": "somekey",
                "title": "Install kubectl",
                "description": "Runs commands against Kubernetes clusters. You can use `kubectl` to deploy applications, inspect and manage cluster resources, and view logs.\n",
                "filepath": "test/inputs/23/kubernetes/kubectl",
                "graph": {
                  "key": "somekey",
                  "sequence": [
                    {
                      "group": "Linux####Windows####MacOS",
                      "groupContext": "test/inputs/23/kubernetes/kubectl",
                      "title": "Install kubectl",
                      "description": "Runs commands against Kubernetes clusters. You can use `kubectl` to deploy applications, inspect and manage cluster resources, and view logs.\n",
                      "source": "placeholder",
                      "provenance": ["test/inputs/23/kubernetes/kubectl"],
                      "choices": [
                        {
                          "member": 0,
                          "graph": {
                            "key": "somekey",
                            "sequence": [
                              {
                                "body": "curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"",
                                "language": "bash",
                                "id": "somekey"
                              }
                            ]
                          },
                          "title": "Linux",
                          "description": "Download the latest release with the command:\n"
                        },
                        {
                          "member": 1,
                          "graph": {
                            "key": "somekey",
                            "sequence": [
                              {
                                "body": "curl -LO \"https://dl.k8s.io/release/v1.23.0/bin/windows/amd64/kubectl.exe\"",
                                "language": "bash",
                                "id": "somekey"
                              }
                            ]
                          },
                          "title": "Windows",
                          "description": "Download the latest release:\n"
                        },
                        {
                          "member": 2,
                          "graph": {
                            "key": "somekey",
                            "sequence": [
                              {
                                "group": "Homebrew####curl",
                                "groupContext": "test/inputs/23/kubernetes/kubectl_1",
                                "source": "placeholder",
                                "provenance": ["test/inputs/23/kubernetes/kubectl"],
                                "choices": [
                                  {
                                    "member": 0,
                                    "graph": {
                                      "key": "somekey",
                                      "sequence": [
                                        {
                                          "body": "brew install kubectl",
                                          "language": "bash",
                                          "id": "somekey"
                                        }
                                      ]
                                    },
                                    "title": "Homebrew",
                                    "description": "\nIf you are on macOS and using Homebrew package manager, you can install kubectl with Homebrew."
                                  },
                                  {
                                    "member": 1,
                                    "graph": {
                                      "key": "somekey",
                                      "sequence": [
                                        {
                                          "group": "Intel####Apple Silicon",
                                          "groupContext": "test/inputs/23/kubernetes/kubectl_2",
                                          "source": "placeholder",
                                          "provenance": ["test/inputs/23/kubernetes/kubectl"],
                                          "choices": [
                                            {
                                              "member": 0,
                                              "graph": {
                                                "key": "somekey",
                                                "sequence": [
                                                  {
                                                    "body": "curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/darwin/amd64/kubectl.sha256\"",
                                                    "language": "bash",
                                                    "id": "somekey"
                                                  }
                                                ]
                                              },
                                              "title": "Intel"
                                            },
                                            {
                                              "member": 1,
                                              "graph": {
                                                "key": "somekey",
                                                "sequence": [
                                                  {
                                                    "body": "curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/darwin/arm64/kubectl.sha256\"",
                                                    "language": "bash",
                                                    "id": "somekey"
                                                  }
                                                ]
                                              },
                                              "title": "Apple Silicon"
                                            }
                                          ]
                                        },
                                        {
                                          "body": "curl -LO \"https://dl.k8s.io/release/v1.23.0/bin/darwin/amd64/kubectl\"\nAnd for macOS on Apple Silicon, type:\n    \ncurl -LO \"https://dl.k8s.io/release/v1.23.0/bin/darwin/arm64/kubectl\"",
                                          "language": "bash",
                                          "id": "somekey"
                                        }
                                      ]
                                    },
                                    "title": "curl",
                                    "description": "To download the latest release:\n"
                                  }
                                ]
                              }
                            ]
                          },
                          "title": "MacOS",
                          "description": "The following methods exist for installing kubectl on macOS:\n"
                        }
                      ]
                    }
                  ]
                },
                "source": "placeholder"
              },
              {
                "key": "somekey",
                "title": "Install Helm v3",
                "description": "This guide shows how to install the Helm CLI. Helm can be installed either from source, or from pre-built binary releases.\n",
                "filepath": "test/inputs/23/kubernetes/helm3",
                "graph": {
                  "key": "somekey",
                  "sequence": [
                    {
                      "group": "MacOS####Linux####Windows",
                      "groupContext": "test/inputs/23/kubernetes/helm3",
                      "title": "Install Helm v3",
                      "description": "This guide shows how to install the Helm CLI. Helm can be installed either from source, or from pre-built binary releases.\n",
                      "source": "placeholder",
                      "provenance": ["test/inputs/23/kubernetes/helm3"],
                      "choices": [
                        {
                          "member": 0,
                          "graph": {
                            "key": "somekey",
                            "sequence": [
                              {
                                "group": "Homebrew####curl",
                                "groupContext": "test/inputs/23/kubernetes/helm3_1",
                                "source": "placeholder",
                                "provenance": ["test/inputs/23/kubernetes/helm3"],
                                "choices": [
                                  {
                                    "member": 0,
                                    "graph": {
                                      "key": "somekey",
                                      "sequence": [
                                        {
                                          "body": "brew install helm",
                                          "language": "shell",
                                          "id": "somekey"
                                        }
                                      ]
                                    },
                                    "title": "Homebrew"
                                  },
                                  {
                                    "member": 1,
                                    "graph": {
                                      "key": "somekey",
                                      "sequence": [
                                        {
                                          "body": "bash $<(curl -L https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3)",
                                          "language": "shell",
                                          "id": "somekey"
                                        }
                                      ]
                                    },
                                    "title": "curl"
                                  }
                                ]
                              }
                            ]
                          },
                          "title": "MacOS"
                        },
                        {
                          "member": 1,
                          "graph": {
                            "key": "somekey",
                            "sequence": [
                              {
                                "body": "bash $<(curl -L https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3)",
                                "language": "shell",
                                "id": "somekey"
                              }
                            ]
                          },
                          "title": "Linux"
                        },
                        {
                          "member": 2,
                          "graph": {
                            "key": "somekey",
                            "sequence": [
                              {
                                "body": "bash $<(curl -L https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3)",
                                "language": "shell",
                                "id": "somekey"
                              }
                            ]
                          },
                          "title": "Windows"
                        }
                      ]
                    }
                  ]
                },
                "source": "placeholder"
              },
              {
                "key": "somekey",
                "title": "Choose a Kubernetes context",
                "description": "Runs commands against Kubernetes clusters. You can use `kubectl` to deploy applications, inspect and manage cluster resources, and view logs.\n",
                "filepath": "test/inputs/23/kubernetes/context",
                "graph": {
                  "key": "somekey",
                  "sequence": [
                    {
                      "key": "somekey",
                      "title": "Install kubectl",
                      "description": "Runs commands against Kubernetes clusters. You can use `kubectl` to deploy applications, inspect and manage cluster resources, and view logs.\n",
                      "filepath": "test/inputs/23/kubernetes/kubectl",
                      "graph": {
                        "key": "somekey",
                        "sequence": [
                          {
                            "group": "Linux####Windows####MacOS",
                            "groupContext": "test/inputs/23/kubernetes/kubectl_3",
                            "title": "Install kubectl",
                            "description": "Runs commands against Kubernetes clusters. You can use `kubectl` to deploy applications, inspect and manage cluster resources, and view logs.\n",
                            "source": "placeholder",
                            "provenance": ["test/inputs/23/kubernetes/kubectl"],
                            "choices": [
                              {
                                "member": 0,
                                "graph": {
                                  "key": "somekey",
                                  "sequence": [
                                    {
                                      "body": "curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"",
                                      "language": "bash",
                                      "id": "somekey"
                                    }
                                  ]
                                },
                                "title": "Linux",
                                "description": "Download the latest release with the command:\n"
                              },
                              {
                                "member": 1,
                                "graph": {
                                  "key": "somekey",
                                  "sequence": [
                                    {
                                      "body": "curl -LO \"https://dl.k8s.io/release/v1.23.0/bin/windows/amd64/kubectl.exe\"",
                                      "language": "bash",
                                      "id": "somekey"
                                    }
                                  ]
                                },
                                "title": "Windows",
                                "description": "Download the latest release:\n"
                              },
                              {
                                "member": 2,
                                "graph": {
                                  "key": "somekey",
                                  "sequence": [
                                    {
                                      "group": "Homebrew####curl",
                                      "groupContext": "test/inputs/23/kubernetes/kubectl_4",
                                      "source": "placeholder",
                                      "provenance": ["test/inputs/23/kubernetes/kubectl"],
                                      "choices": [
                                        {
                                          "member": 0,
                                          "graph": {
                                            "key": "somekey",
                                            "sequence": [
                                              {
                                                "body": "brew install kubectl",
                                                "language": "bash",
                                                "id": "somekey"
                                              }
                                            ]
                                          },
                                          "title": "Homebrew",
                                          "description": "\nIf you are on macOS and using Homebrew package manager, you can install kubectl with Homebrew."
                                        },
                                        {
                                          "member": 1,
                                          "graph": {
                                            "key": "somekey",
                                            "sequence": [
                                              {
                                                "group": "Intel####Apple Silicon",
                                                "groupContext": "test/inputs/23/kubernetes/kubectl_5",
                                                "source": "placeholder",
                                                "provenance": ["test/inputs/23/kubernetes/kubectl"],
                                                "choices": [
                                                  {
                                                    "member": 0,
                                                    "graph": {
                                                      "key": "somekey",
                                                      "sequence": [
                                                        {
                                                          "body": "curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/darwin/amd64/kubectl.sha256\"",
                                                          "language": "bash",
                                                          "id": "somekey"
                                                        }
                                                      ]
                                                    },
                                                    "title": "Intel"
                                                  },
                                                  {
                                                    "member": 1,
                                                    "graph": {
                                                      "key": "somekey",
                                                      "sequence": [
                                                        {
                                                          "body": "curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/darwin/arm64/kubectl.sha256\"",
                                                          "language": "bash",
                                                          "id": "somekey"
                                                        }
                                                      ]
                                                    },
                                                    "title": "Apple Silicon"
                                                  }
                                                ]
                                              },
                                              {
                                                "body": "curl -LO \"https://dl.k8s.io/release/v1.23.0/bin/darwin/amd64/kubectl\"\nAnd for macOS on Apple Silicon, type:\n    \ncurl -LO \"https://dl.k8s.io/release/v1.23.0/bin/darwin/arm64/kubectl\"",
                                                "language": "bash",
                                                "id": "somekey"
                                              }
                                            ]
                                          },
                                          "title": "curl",
                                          "description": "To download the latest release:\n"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "title": "MacOS",
                                "description": "The following methods exist for installing kubectl on macOS:\n"
                              }
                            ]
                          }
                        ]
                      },
                      "source": "placeholder"
                    },
                    {
                      "group": "fakeit",
                      "groupContext": "test/inputs/23/kubernetes/context",
                      "title": "Choose a Kubernetes context",
                      "description": "Runs commands against Kubernetes clusters. You can use `kubectl` to deploy applications, inspect and manage cluster resources, and view logs.\n",
                      "source": "placeholder",
                      "provenance": ["test/inputs/23/kubernetes/context"],
                      "choices": [
                        {
                          "member": 0,
                          "graph": {
                            "key": "somekey",
                            "sequence": [
                              {
                                "body": "kubectl config set-context \"${choice}\"",
                                "language": "shell",
                                "id": "somekey"
                              }
                            ]
                          },
                          "title": "fakeit"
                        }
                      ]
                    }
                  ]
                },
                "source": "placeholder"
              },
              {
                "key": "somekey",
                "title": "Install Ray on a Kubernetes Cluster",
                "description": "This will install Ray on a Kubernetes context of your choosing.\n",
                "filepath": "",
                "graph": {
                  "key": "somekey",
                  "sequence": [
                    {
                      "body": "helm -n ray install example-cluster --create-namespace https://github.com/ray-project/ray/tree/master/deploy/charts/ray/\nkubectl wait --for=condition=available --all rayclusters",
                      "language": "shell",
                      "id": "somekey"
                    }
                  ]
                },
                "source": "placeholder"
              }
            ]
          },
          "title": "Kubernetes Install",
          "description": "This will install Ray on a Kubernetes context of your choosing.\n"
        }
      ]
    },
    "step": {
      "name": "Install Ray",
      "content": [
        {
          "title": "Local Install",
          "group": "Local Install####Kubernetes Install",
          "member": 0,
          "isFirstChoice": true,
          "description": "\nThis will install Ray on your laptop."
        },
        {
          "title": "Kubernetes Install",
          "group": "Local Install####Kubernetes Install",
          "member": 1,
          "isFirstChoice": true,
          "description": "This will install Ray on a Kubernetes context of your choosing.\n"
        }
      ]
    }
  },
  {
    "graph": {
      "group": "Example: Using Ray Tasks to Parallelize a Function####Example: Using Ray Actors to Parallelize a Class####Example: Creating and Transforming Datasets",
      "groupContext": "test/inputs/23/in",
      "title": "Run a Ray Job",
      "source": "placeholder",
      "provenance": ["test/inputs/23/in"],
      "choices": [
        {
          "member": 0,
          "graph": {
            "key": "somekey",
            "sequence": [
              {
                "key": "somekey",
                "title": "Ray Core: Parallelizing Functions with Ray Tasks",
                "description": "First, you import Ray and and initialize it with `ray.init()`. Then you decorate your function with `@ray.remote` to declare that you want to run this function remotely. Lastly, you call that function with `.remote()` instead of calling it normally. This remote call yields a future, a so-called Ray object reference, that you can then fetch with `ray.get`.\n",
                "filepath": "",
                "graph": {
                  "key": "somekey",
                  "sequence": [
                    {
                      "body": "import ray\nray.init()\n\n@ray.remote\ndef f(x):\n    return x * x\n\nfutures = [f.remote(i) for i in range(4)]\nprint(ray.get(futures)) # [0, 1, 4, 9]",
                      "language": "python",
                      "id": "somekey"
                    }
                  ]
                },
                "source": "placeholder"
              }
            ]
          },
          "title": "Example: Using Ray Tasks to Parallelize a Function",
          "description": "First, you import Ray and and initialize it with `ray.init()`. Then you decorate your function with `@ray.remote` to declare that you want to run this function remotely. Lastly, you call that function with `.remote()` instead of calling it normally. This remote call yields a future, a so-called Ray object reference, that you can then fetch with `ray.get`.\n"
        },
        {
          "member": 1,
          "graph": {
            "key": "somekey",
            "sequence": [
              {
                "key": "somekey",
                "title": "Ray Core: Parallelizing Classes with Ray Actors",
                "description": "Ray provides actors to allow you to parallelize an instance of a class in Python or Java. When you instantiate a class that is a Ray actor, Ray will start a remote instance of that class in the cluster. This actor can then execute remote method calls and maintain its own internal state.\n",
                "filepath": "",
                "graph": {
                  "key": "somekey",
                  "sequence": [
                    {
                      "body": "import ray\nray.init() # Only call this once.\n\n@ray.remote\nclass Counter(object):\n    def __init__(self):\n        self.n = 0\n\n    def increment(self):\n        self.n += 1\n\n    def read(self):\n        return self.n\n\ncounters = [Counter.remote() for i in range(4)]\n[c.increment.remote() for c in counters]\nfutures = [c.read.remote() for c in counters]\nprint(ray.get(futures)) # [1, 1, 1, 1]",
                      "language": "python",
                      "id": "somekey"
                    }
                  ]
                },
                "source": "placeholder"
              }
            ]
          },
          "title": "Example: Using Ray Actors to Parallelize a Class",
          "description": "Ray provides actors to allow you to parallelize an instance of a class in Python or Java. When you instantiate a class that is a Ray actor, Ray will start a remote instance of that class in the cluster. This actor can then execute remote method calls and maintain its own internal state.\n"
        },
        {
          "member": 2,
          "graph": {
            "key": "somekey",
            "sequence": [
              {
                "key": "somekey",
                "title": "Install Ray Data",
                "description": "Ray Datasets are the standard way to load and exchange data in Ray libraries and applications. They provide basic distributed data transformations such as `map`, `filter`, and `repartition`, and are compatible with a variety of file formats, data sources, and distributed frameworks.\n",
                "filepath": "test/inputs/23/data",
                "graph": {
                  "key": "somekey",
                  "sequence": [
                    {
                      "key": "somekey",
                      "title": "Install Ray Data",
                      "description": "Ray Datasets are the standard way to load and exchange data in Ray libraries and applications. They provide basic distributed data transformations such as `map`, `filter`, and `repartition`, and are compatible with a variety of file formats, data sources, and distributed frameworks.\n",
                      "filepath": "",
                      "graph": {
                        "key": "somekey",
                        "sequence": [
                          {
                            "body": "pip install \"ray[data]\" dask",
                            "language": "shell",
                            "id": "somekey"
                          }
                        ]
                      },
                      "source": "placeholder"
                    }
                  ]
                },
                "source": "placeholder"
              },
              {
                "group": "New Dataset from Range####New Dataset from File",
                "groupContext": "test/inputs/23/in_1",
                "title": "Creating and Transforming Datasets",
                "source": "placeholder",
                "provenance": ["test/inputs/23/in"],
                "choices": [
                  {
                    "member": 0,
                    "graph": {
                      "key": "somekey",
                      "sequence": [
                        {
                          "body": "import ray\n\n# Create a Dataset of Python objects.\nds = ray.data.range(10000)\n# -> Dataset(num_blocks=200, num_rows=10000, schema=<class 'int'>)\n\nds.take(5)\n# -> [0, 1, 2, 3, 4]\n\nds.count()\n# -> 10000\n\n# Create a Dataset of Arrow records.\nds = ray.data.from_items([{\"col1\": i, \"col2\": str(i)} for i in range(10000)])\n# -> Dataset(num_blocks=200, num_rows=10000, schema={col1: int64, col2: string})\n\nds.show(5)\n# -> {'col1': 0, 'col2': '0'}\n# -> {'col1': 1, 'col2': '1'}\n# -> {'col1': 2, 'col2': '2'}\n# -> {'col1': 3, 'col2': '3'}\n# -> {'col1': 4, 'col2': '4'}\n\nds.schema()\n# -> col1: int64\n# -> col2: string",
                          "language": "python",
                          "id": "somekey"
                        }
                      ]
                    },
                    "title": "New Dataset from Range",
                    "description": "\nGet started by creating Datasets from synthetic data using"
                  },
                  {
                    "member": 1,
                    "graph": {
                      "key": "somekey",
                      "sequence": [
                        {
                          "body": "import ray\nimport pandas as pd\nimport dask.dataframe as dd\n\n# Create a Dataset from a list of Pandas DataFrame objects.\npdf = pd.DataFrame({\"one\": [1, 2, 3], \"two\": [\"a\", \"b\", \"c\"]})\nds = ray.data.from_pandas([pdf])\n\n# Create a Dataset from a Dask-on-Ray DataFrame.\ndask_df = dd.from_pandas(pdf, npartitions=10)\nds = ray.data.from_dask(dask_df)\n\n# Transform the dataset using .map()\nds = ray.data.range(10000)\nds = ds.map(lambda x: x * 2)\n# -> Map Progress: 100%|████████████████████| 200/200 [00:00<00:00, 1123.54it/s]\n# -> Dataset(num_blocks=200, num_rows=10000, schema=<class 'int'>)\nds.take(5)\n# -> [0, 2, 4, 6, 8]\n\n# Transform the dataset using .filter()\nds.filter(lambda x: x > 5).take(5)\n# -> Map Progress: 100%|████████████████████| 200/200 [00:00<00:00, 1859.63it/s]\n# -> [6, 8, 10, 12, 14]\n\n# Transform the dataset using .flat_map()\nds.flat_map(lambda x: [x, -x]).take(5)\n# -> Map Progress: 100%|████████████████████| 200/200 [00:00<00:00, 1568.10it/s]\n# -> [0, 0, 2, -2, 4]",
                          "language": "python",
                          "id": "somekey"
                        }
                      ]
                    },
                    "title": "New Dataset from File",
                    "description": "\nDatasets can be created from files on local disk or remote datasources\nsuch as S3. Any filesystem [supported by pyarrow](http://arrow.apache.org/docs/python/generated/pyarrow.fs.FileSystem.html)"
                  }
                ]
              }
            ]
          },
          "title": "Example: Creating and Transforming Datasets",
          "description": "Ray Datasets are the standard way to load and exchange data in Ray libraries and applications. They provide basic distributed data transformations such as `map`, `filter`, and `repartition`, and are compatible with a variety of file formats, data sources, and distributed frameworks.\n"
        }
      ]
    },
    "step": {
      "name": "Run a Ray Job",
      "content": [
        {
          "title": "Example: Using Ray Tasks to Parallelize a Function",
          "group": "Example: Using Ray Tasks to Parallelize a Function####Example: Using Ray Actors to Parallelize a Class####Example: Creating and Transforming Datasets",
          "member": 0,
          "isFirstChoice": false,
          "description": "First, you import Ray and and initialize it with `ray.init()`. Then you decorate your function with `@ray.remote` to declare that you want to run this function remotely. Lastly, you call that function with `.remote()` instead of calling it normally. This remote call yields a future, a so-called Ray object reference, that you can then fetch with `ray.get`.\n"
        },
        {
          "title": "Example: Using Ray Actors to Parallelize a Class",
          "group": "Example: Using Ray Tasks to Parallelize a Function####Example: Using Ray Actors to Parallelize a Class####Example: Creating and Transforming Datasets",
          "member": 1,
          "isFirstChoice": false,
          "description": "Ray provides actors to allow you to parallelize an instance of a class in Python or Java. When you instantiate a class that is a Ray actor, Ray will start a remote instance of that class in the cluster. This actor can then execute remote method calls and maintain its own internal state.\n"
        },
        {
          "title": "Example: Creating and Transforming Datasets",
          "group": "Example: Using Ray Tasks to Parallelize a Function####Example: Using Ray Actors to Parallelize a Class####Example: Creating and Transforming Datasets",
          "member": 2,
          "isFirstChoice": false,
          "description": "Ray Datasets are the standard way to load and exchange data in Ray libraries and applications. They provide basic distributed data transformations such as `map`, `filter`, and `repartition`, and are compatible with a variety of file formats, data sources, and distributed frameworks.\n"
        }
      ]
    }
  }
]
